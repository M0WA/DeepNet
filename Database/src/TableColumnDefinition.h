/**
 * @file TableColumnDefinition.h
 * @author Moritz Wagner
 * @date 10.08.2012
 */

#pragma once

#include <string>
#include "TableColumnType.h"
#include "TableColumnDefinitionCreateParam.h"

namespace database {

/**
 * @brief class containing definition of a TableColumn.
 * column definition used in TableColumn class.
 */
class TableColumnDefinition {

private:
	TableColumnDefinition(const TableColumnDefinition& copy);
	TableColumnDefinition(const TableColumnDefinitionCreateParam& param);

public:
	virtual ~TableColumnDefinition();

public:
	/**
	 * gets column type.
	 * @return column type.
	 */
	const TableColumnType& GetColumnType(void) const { return definition.columnType; }

	/**
	 * gets table name.
	 * @return table name.
	 */
	const std::string& GetTableName(void) const { return definition.tableName; }

	/**
	 * gets database name.
	 * @return database name.
	 */
	const std::string& GetDatabaseName(void) const { return definition.databaseName; }

	/**
	 * gets column name.
	 * @return column name.
	 */
	const std::string& GetColumnName(void) const { return definition.columnName; }

	/**
	 * check if column is a primary key.
	 * @return false if column is not a primary key, true if it is.
	 */
	bool IsPrimaryKey (void) const { return definition.isPrimaryKey; }

	/**
	 * checks if value for this column is generated automatically.
	 * i.e. auto-increment id columns.
	 * @return false if column is not automatically generated, true if it is.
	 */
	bool IsAutoGenerated(void) const { return definition.isAutoGenerated; }

	/**
	 * checks if column is a foreign key.
	 * @return false if column is not a foreign key, true if it is.
	 */
	bool IsForeignKey(void) const { return definition.isForeignKey; }

	/**
	 * checks if column is a unique key.
	 * @return false if column is not a unique key, true if it is.
	 */
	bool IsUniqueKey(void) const { return definition.isUniqueKey; }

	/**
	 * checks if column is an index.
	 * @return false if column is not indexed, true if it is.
	 */
	bool IsIndex(void) const;

	/**
	 * checks if column is nullable.
	 * @return false if column is not nullable, true if it is.
	 */
	bool IsNullable(void) const;

	/**
	 * checks if column has a default value.
	 * @return false if column is no default value, true if it has.
	 */
	bool HasDefaultValue(void) const { return definition.hasDefaultValue; }

	/**
	 * gets size limit for data value of this column
	 * @return data size limit or 0 (unlimited)
	 */
	size_t DataSizeLimit(void) const { return definition.dataSize; }

	/**
	 * gets const create parameters for this column.
	 * @return create parameters for this column.
	 */
	const TableColumnDefinitionCreateParam& GetConstCreateParam(void) const { return definition; }

	/**
	 * gets create parameters for this column.
	 * @return create parameters for this column.
	 */
	TableColumnDefinitionCreateParam& GetCreateParam(void) { return definition; }

public:
	/**
	 * factory function for column definitions.
	 * @param param column definition.
	 * @return column definition.
	 */
	static TableColumnDefinition* CreateInstance(const TableColumnDefinitionCreateParam& param);

private:
	TableColumnDefinitionCreateParam definition;
};

}

