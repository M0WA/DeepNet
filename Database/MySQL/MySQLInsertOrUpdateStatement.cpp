/**
 * @file MySQLInsertOrUpdateStatement.cpp
 * @author Moritz Wagner
 * @date 01.05.2012
 */

#include "MySQLInsertOrUpdateStatement.h"

#include <sstream>

#include "TableBase.h"
#include "TableDefinition.h"
#include "TableColumn.h"
#include "TableColumnDefinition.h"

#include "InsertOrUpdateStatement.h"

#include "DatabaseNoColumnsException.h"
#include "DatabaseInvalidColumnNameException.h"
#include "DatabaseNoPrimaryKeyException.h"

namespace database {

MySQLInsertOrUpdateStatement::MySQLInsertOrUpdateStatement(const InsertOrUpdateStatement& stmt)
: orgStatement(stmt) {
}

MySQLInsertOrUpdateStatement::~MySQLInsertOrUpdateStatement() {
}

std::string MySQLInsertOrUpdateStatement::ToSQL( DatabaseConnection* db ) const {

	const TableBase* tableBase = orgStatement.GetConstTableBase();
	const std::vector<TableColumn*>& cols = tableBase->GetConstColumns();
	if(cols.size() == 0)
		THROW_EXCEPTION(DatabaseNoColumnsException);

	const TableColumnDefinition* primaryKeyDef = tableBase->GetConstTableDefinition()->GetConstPrimaryKeyColumnDefinition();
	if(!primaryKeyDef) {
		THROW_EXCEPTION(database::DatabaseNoPrimaryKeyException);}
	const std::string& primaryKeyColumnName = primaryKeyDef->GetColumnName();

	std::stringstream ssColumnNames, ssColumnValues;
	ssColumnNames  << " ( ";
	ssColumnValues << " ( ";
	std::vector<TableColumn*>::const_iterator iterCols = cols.begin();
	for(int i = 0;iterCols != cols.end();++iterCols,i++) {

		if(i) {
			ssColumnNames  << ", ";
			ssColumnValues << ", ";	}

		if(!tableBase->GetTableAlias().empty())
			ssColumnNames  << tableBase->GetTableAlias() << ".";

		const TableColumn* pCurCol(*iterCols);
		const TableColumnDefinition* pColDef(pCurCol->GetConstColumnDefinition());
		bool allowNullColumn = pCurCol->IsDirty() || pColDef->HasDefaultValue() || pColDef->IsAutoGenerated();
		if(pCurCol->IsNull() && !allowNullColumn) {
			THROW_EXCEPTION(database::DatabaseException,"MySQLInvalidDuplicateKeyUpdateException","not all fields are set for insertorupdate");
		}

		ssColumnNames  << (*iterCols)->GetColumnName();
		ssColumnValues << (*iterCols)->GetForSQL(db);
	}
	ssColumnNames  << " ) ";
	ssColumnValues << " ) ";

	std::stringstream ssQuery;
	ssQuery <<
			"INSERT INTO " << tableBase->GetConstTableDefinition()->GetFullQualifiedTableName() << " " << tableBase->GetTableAlias()  << " " << ssColumnNames.str() <<
			" VALUES " << ssColumnValues.str() <<
			" ON DUPLICATE KEY UPDATE " << primaryKeyColumnName << " = LAST_INSERT_ID( " << primaryKeyColumnName << " ) ";

	const std::vector< TableColumnDefinition* >& colDefs = tableBase->GetConstTableDefinition()->GetConstColumnDefinitions();
	std::vector< TableColumnDefinition* >::const_iterator iterReplace = colDefs.begin();
	for(;iterReplace != colDefs.end();++iterReplace) {

		const TableColumnDefinition* pColDef = (*iterReplace);
		const std::string& columnName = pColDef->GetColumnName();

		if(columnName.compare(primaryKeyColumnName) == 0)
			continue;

		const TableColumn* pCurCol = tableBase->GetConstColumnByName(columnName);
		bool allowNullColumn = pCurCol->IsDirty() || pColDef->HasDefaultValue() || pColDef->IsAutoGenerated();
		if(pCurCol->IsNull() && !allowNullColumn)
			continue;

		if(!orgStatement.IsSumColumn(columnName)) {
			ssQuery << ", " << columnName << " = VALUES( " << columnName << " ) ";
		}
	}

	const tools::PointerContainer<TableColumnDefinition>& sumColumnContainer = orgStatement.sumColumns;
	sumColumnContainer.ResetIter();
	for(;!sumColumnContainer.IsIterEnd();sumColumnContainer.Next()) {
		const std::string& sumColumnName = sumColumnContainer.GetConstIter()->GetColumnName();

		if(sumColumnName.compare(primaryKeyColumnName) == 0)
			THROW_EXCEPTION(DatabaseInvalidColumnNameException,primaryKeyColumnName);

		ssQuery << ", " << sumColumnName << " = " << sumColumnName << " + VALUES( " << sumColumnName << " ) ";
	}

	return ssQuery.str();
}

}
