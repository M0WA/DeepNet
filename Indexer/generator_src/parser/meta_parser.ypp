%define api.pure
%lex-param {void * scanner}
%parse-param {MetaIndexerCtx * ctx}

%code requires {

#include "../src/MetaIndexer.h"
#include <string>
typedef void* yyscan_t;
#define YYSTYPE std::string*

extern "C"
{
	int metaIndexer_yylex(YYSTYPE * yylval_param ,yyscan_t yyscanner);
	int metaIndexer_yyerror(MetaIndexerCtx*,const char*);
	int metaIndexer_yylex_init_extra(MetaIndexerCtx* yy_user_defined,yyscan_t* ptr_yy_globals );
	int metaIndexer_yylex_destroy(yyscan_t ptr_yy_globals );
};

}

%code provides {

#include "../src/MetaIndexer.h"

namespace indexing
{
class MetaIndexerHelper
{
public:
	static bool ParseFromContext(MetaIndexerCtx* ctx);
	
private:	
	static bool InitThread(MetaIndexerCtx* ctx);
	static bool DestroyThread(MetaIndexerCtx* ctx);
};
}

}

%{
//
// this seems to be a very shitty wordaround 
// but is needed as far as I know
//
#define scanner ctx->memoryScanner

%}

%token FACTFINDER_FLAG GOOGLEANALYTICS_FLAG
%start contents

%%
contents:
  | FACTFINDER_FLAG			{ $$ = $1; ctx->indexer->OnFactFinder(); }
  | GOOGLEANALYTICS_FLAG 	{ $$ = $1; ctx->indexer->OnGoogleAnalytics(); }
;
%%

////////////////////////////////////////////////

namespace indexing
{

bool MetaIndexerHelper::ParseFromContext(MetaIndexerCtx* ctx)
{
	MetaIndexerHelper::InitThread(ctx);
	metaIndexer_yyparse(ctx);
	MetaIndexerHelper::DestroyThread(ctx);
	return true;
}

bool MetaIndexerHelper::InitThread(MetaIndexerCtx* ctx)
{
	metaIndexer_yylex_init_extra( (MetaIndexerCtx*)ctx, &ctx->memoryScanner );
	return true;
}

bool MetaIndexerHelper::DestroyThread(MetaIndexerCtx* ctx)
{
	metaIndexer_yylex_destroy(ctx->memoryScanner);
	return true;
}


}
