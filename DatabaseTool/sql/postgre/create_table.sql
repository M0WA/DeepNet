
\c deepnet


/* topleveldomains - Postgre   */
CREATE TABLE topleveldomains
(
 ID BIGSERIAL NOT NULL,
 tld VARCHAR(255) NOT NULL,
 CONSTRAINT PRI__TOPLEVELDOMAINS_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__TOPLEVELDOMAINS_TLD UNIQUE (tld)
);


/* cachesecondleveldomain - Postgre   */
CREATE TABLE cachesecondleveldomain
(
 ID BIGSERIAL NOT NULL,
 size INTEGER NOT NULL,
 matches INTEGER NOT NULL,
 misses INTEGER NOT NULL,
 action_time TIMESTAMP NOT NULL,
 CONSTRAINT PRI__CACHESECONDLEVELDOMAIN_ID PRIMARY KEY (ID)
);


/* locksecondleveldomain - Postgre   */
CREATE TABLE locksecondleveldomain
(
 SECONDLEVELDOMAIN_ID INTEGER NOT NULL,
 CRAWLERSESSION_ID INTEGER NOT NULL,
 schedule TIMESTAMP NOT NULL,
 CONSTRAINT PRI__LOCKSECONDLEVELDOMAIN_SECONDLEVELDOMAIN_ID PRIMARY KEY (SECONDLEVELDOMAIN_ID)
);


/* logmessages - Postgre   */
CREATE TABLE logmessages
(
 ID BIGSERIAL NOT NULL,
 loglevel INTEGER NOT NULL,
 message VARCHAR(2048) NOT NULL,
 actiontime TIMESTAMP NOT NULL,
 pid INTEGER NOT NULL,
 tid INTEGER NOT NULL,
 appName VARCHAR(255),
 threadName VARCHAR(255),
 CONSTRAINT PRI__LOGMESSAGES_ID PRIMARY KEY (ID)
);


/* cacherobots - Postgre   */
CREATE TABLE cacherobots
(
 ID BIGSERIAL NOT NULL,
 size INTEGER NOT NULL,
 matches INTEGER NOT NULL,
 misses INTEGER NOT NULL,
 action_time TIMESTAMP NOT NULL,
 CONSTRAINT PRI__CACHEROBOTS_ID PRIMARY KEY (ID)
);


/* cachehtml - Postgre   */
CREATE TABLE cachehtml
(
 ID BIGSERIAL NOT NULL,
 size INTEGER NOT NULL,
 matches INTEGER NOT NULL,
 misses INTEGER NOT NULL,
 action_time TIMESTAMP NOT NULL,
 CONSTRAINT PRI__CACHEHTML_ID PRIMARY KEY (ID)
);


/* queryresults - Postgre   */
CREATE TABLE queryresults
(
 ID BIGSERIAL NOT NULL,
 SEARCHQUERY_ID INTEGER NOT NULL,
 URL_ID INTEGER NOT NULL,
 URLSTAGE_ID INTEGER NOT NULL,
 order_position INTEGER NOT NULL,
 CONSTRAINT PRI__QUERYRESULTS_ID PRIMARY KEY (ID)
);


/* urlstages - Postgre   */
CREATE TABLE urlstages
(
 ID BIGSERIAL NOT NULL,
 URL_ID INTEGER NOT NULL,
 response_code INTEGER,
 content_md5 CHAR(32),
 last_change TIMESTAMP,
 redirect_count INTEGER,
 download_speed INTEGER,
 upload_speed INTEGER,
 content_length INTEGER,
 content_type VARCHAR(255),
 primary_ip INTEGER,
 primary_port INTEGER,
 int_links INTEGER,
 ext_links INTEGER,
 download_time INTEGER,
 html_errors INTEGER,
 found_date TIMESTAMP NOT NULL,
 CONSTRAINT PRI__URLSTAGES_ID PRIMARY KEY (ID)
);


/* documentcode - Postgre   */
CREATE TABLE documentcode
(
 ID BIGSERIAL NOT NULL,
 URLSTAGE_ID INTEGER NOT NULL,
 code VARCHAR(4096000) NOT NULL,
 CONSTRAINT PRI__DOCUMENTCODE_ID PRIMARY KEY (ID)
);


/* hyperlinks - Postgre   */
CREATE TABLE hyperlinks
(
 ID BIGSERIAL NOT NULL,
 TARGET_URL_ID INTEGER NOT NULL,
 URLSTAGE_ID INTEGER NOT NULL,
 count INTEGER NOT NULL,
 CONSTRAINT PRI__HYPERLINKS_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__HYPERLINKS_TARGET_URL_ID_URLSTAGE_ID UNIQUE (TARGET_URL_ID,URLSTAGE_ID)
);


/* keywordquery - Postgre   */
CREATE TABLE keywordquery
(
 ID BIGSERIAL NOT NULL,
 query_part VARCHAR(255) NOT NULL,
 CONSTRAINT PRI__KEYWORDQUERY_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__KEYWORDQUERY_QUERY_PART UNIQUE (query_part)
);


/* metainfo - Postgre   */
CREATE TABLE metainfo
(
 ID BIGSERIAL NOT NULL,
 URLSTAGE_ID INTEGER NOT NULL,
 type INTEGER NOT NULL,
 value VARCHAR(255) NOT NULL,
 CONSTRAINT PRI__METAINFO_ID PRIMARY KEY (ID)
);


/* customermatchcriteria - Postgre   */
CREATE TABLE customermatchcriteria
(
 ID BIGSERIAL NOT NULL,
 CUSTOMERDOMAIN_ID INTEGER NOT NULL,
 MATCHCRITERIA_ID INTEGER NOT NULL,
 type INTEGER NOT NULL,
 CONSTRAINT PRI__CUSTOMERMATCHCRITERIA_ID PRIMARY KEY (ID)
);


/* unittest1 - Postgre   */
CREATE TABLE unittest1
(
 ID BIGSERIAL NOT NULL,
 timestamp_test TIMESTAMP NOT NULL,
 varchar_test VARCHAR(255) NOT NULL,
 double_test double precision NOT NULL,
 integer_test INTEGER NOT NULL,
 CONSTRAINT PRI__UNITTEST1_ID PRIMARY KEY (ID)
);


/* schemes - Postgre   */
CREATE TABLE schemes
(
 ID BIGSERIAL NOT NULL,
 scheme VARCHAR(255) NOT NULL,
 CONSTRAINT PRI__SCHEMES_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__SCHEMES_SCHEME UNIQUE (scheme)
);


/* customersessions - Postgre   */
CREATE TABLE customersessions
(
 ID BIGSERIAL NOT NULL,
 CUSTOMER_ID INTEGER NOT NULL,
 session VARCHAR(255) NOT NULL,
 CONSTRAINT PRI__CUSTOMERSESSIONS_ID PRIMARY KEY (ID)
);


/* customersyncurl - Postgre   */
CREATE TABLE customersyncurl
(
 ID BIGSERIAL NOT NULL,
 URL_ID INTEGER NOT NULL,
 scheduled TIMESTAMP NOT NULL,
 CONSTRAINT PRI__CUSTOMERSYNCURL_ID PRIMARY KEY (ID)
);


/* dataminingblacklist - Postgre   */
CREATE TABLE dataminingblacklist
(
 ID BIGSERIAL NOT NULL,
 CUSTOMER_ID INTEGER NOT NULL,
 domain VARCHAR(2048) NOT NULL,
 CONSTRAINT PRI__DATAMININGBLACKLIST_ID PRIMARY KEY (ID)
);


/* docurl - Postgre   */
CREATE TABLE docurl
(
 ID BIGSERIAL NOT NULL,
 DICT_ID INTEGER NOT NULL,
 URL_ID INTEGER NOT NULL,
 CONSTRAINT PRI__DOCURL_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__DOCURL_URL_ID_DICT_ID UNIQUE (URL_ID,DICT_ID)
);


/* images - Postgre   */
CREATE TABLE images
(
 ID BIGSERIAL NOT NULL,
 SCHEME_ID INTEGER NOT NULL,
 TOPLEVELDOMAIN_ID INTEGER NOT NULL,
 SUBDOMAIN_ID INTEGER,
 SECONDLEVELDOMAIN_ID INTEGER NOT NULL,
 port INTEGER NOT NULL,
 path_part VARCHAR(2048) NOT NULL,
 search_part VARCHAR(2048) NOT NULL,
 url_md5 CHAR(32) NOT NULL,
 found_date TIMESTAMP NOT NULL,
 CONSTRAINT PRI__IMAGES_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__IMAGES_URL_MD5 UNIQUE (url_md5)
);


/* dataminingcustomersession - Postgre   */
CREATE TABLE dataminingcustomersession
(
 ID BIGSERIAL NOT NULL,
 CUSTOMER_ID INTEGER NOT NULL,
 session VARCHAR(255) NOT NULL,
 CONSTRAINT PRI__DATAMININGCUSTOMERSESSION_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__DATAMININGCUSTOMERSESSION_SESSION UNIQUE (session)
);


/* latesturlstages - Postgre   */
CREATE TABLE latesturlstages
(
 ID BIGSERIAL NOT NULL,
 URL_ID INTEGER NOT NULL,
 URLSTAGE_ID INTEGER NOT NULL,
 CONSTRAINT PRI__LATESTURLSTAGES_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__LATESTURLSTAGES_URL_ID UNIQUE (URL_ID)
);


/* imagelinks - Postgre   */
CREATE TABLE imagelinks
(
 ID BIGSERIAL NOT NULL,
 TARGET_URL_ID INTEGER NOT NULL,
 IMAGE_URL_ID INTEGER NOT NULL,
 URLSTAGE_ID INTEGER NOT NULL,
 CONSTRAINT PRI__IMAGELINKS_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__IMAGELINKS_TARGET_URL_ID_URLSTAGE_ID_IMAGE_URL_ID UNIQUE (TARGET_URL_ID,URLSTAGE_ID,IMAGE_URL_ID )
);


/* customerproductimages - Postgre   */
CREATE TABLE customerproductimages
(
 ID BIGSERIAL NOT NULL,
 PRODUCT_ID INTEGER NOT NULL,
 imageUrl VARCHAR(2048) NOT NULL,
 CONSTRAINT PRI__CUSTOMERPRODUCTIMAGES_ID PRIMARY KEY (ID)
);


/* unittest2 - Postgre   */
CREATE TABLE unittest2
(
 ID BIGSERIAL NOT NULL,
 timestamp_test TIMESTAMP NOT NULL,
 varchar_test VARCHAR(255) NOT NULL,
 double_test double precision NOT NULL,
 integer_test INTEGER NOT NULL,
 CONSTRAINT PRI__UNITTEST2_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__UNITTEST2_DOUBLE_TEST UNIQUE (double_test)
);


/* customers - Postgre   */
CREATE TABLE customers
(
 ID BIGSERIAL NOT NULL,
 login VARCHAR(255) NOT NULL,
 password VARCHAR(255) NOT NULL,
 CONSTRAINT PRI__CUSTOMERS_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__CUSTOMERS_LOGIN UNIQUE (login)
);


/* cachesubdomain - Postgre   */
CREATE TABLE cachesubdomain
(
 ID BIGSERIAL NOT NULL,
 size INTEGER NOT NULL,
 matches INTEGER NOT NULL,
 misses INTEGER NOT NULL,
 action_time TIMESTAMP NOT NULL,
 CONSTRAINT PRI__CACHESUBDOMAIN_ID PRIMARY KEY (ID)
);


/* dockey - Postgre   */
CREATE TABLE dockey
(
 ID BIGSERIAL NOT NULL,
 DICT_ID INTEGER NOT NULL,
 URLSTAGE_ID INTEGER NOT NULL,
 occurrence INTEGER NOT NULL,
 CONSTRAINT PRI__DOCKEY_ID PRIMARY KEY (ID)
);


/* customerproductkeywords - Postgre   */
CREATE TABLE customerproductkeywords
(
 ID BIGSERIAL NOT NULL,
 PRODUCT_ID INTEGER NOT NULL,
 DICT_ID INTEGER NOT NULL,
 CONSTRAINT PRI__CUSTOMERPRODUCTKEYWORDS_ID PRIMARY KEY (ID)
);


/* dataminingcriteriaalerts - Postgre   */
CREATE TABLE dataminingcriteriaalerts
(
 ID BIGSERIAL NOT NULL,
 CUSTOMER_ID INTEGER NOT NULL,
 DATAMININGALERT_ID INTEGER NOT NULL,
 DATAMININGCRITERIA_ID INTEGER NOT NULL,
 CONSTRAINT PRI__DATAMININGCRITERIAALERTS_ID PRIMARY KEY (ID)
);


/* dataminingcustomer - Postgre   */
CREATE TABLE dataminingcustomer
(
 ID BIGSERIAL NOT NULL,
 login VARCHAR(255) NOT NULL,
 password VARCHAR(255) NOT NULL,
 CONSTRAINT PRI__DATAMININGCUSTOMER_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__DATAMININGCUSTOMER_LOGIN UNIQUE (login)
);


/* secondleveldomains - Postgre   */
CREATE TABLE secondleveldomains
(
 ID BIGSERIAL NOT NULL,
 domain VARCHAR(255) NOT NULL,
 CONSTRAINT PRI__SECONDLEVELDOMAINS_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__SECONDLEVELDOMAINS_DOMAIN UNIQUE (domain)
);


/* customerdomains - Postgre   */
CREATE TABLE customerdomains
(
 ID BIGSERIAL NOT NULL,
 CUSTOMER_ID INTEGER NOT NULL,
 domain VARCHAR(2048) NOT NULL,
 revisitInterval INTEGER NOT NULL,
 isDomainRegex INTEGER NOT NULL,
 CONSTRAINT PRI__CUSTOMERDOMAINS_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__CUSTOMERDOMAINS_CUSTOMER_ID UNIQUE (CUSTOMER_ID)
);


/* syncurls - Postgre   */
CREATE TABLE syncurls
(
 ID BIGSERIAL NOT NULL,
 URL_ID INTEGER NOT NULL,
 SECONDLEVELDOMAIN_ID INTEGER NOT NULL,
 CRAWLERSESSION_ID INTEGER NOT NULL,
 schedule TIMESTAMP NOT NULL,
 CONSTRAINT PRI__SYNCURLS_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__SYNCURLS_URL_ID UNIQUE (URL_ID)
);


/* crawlersessions - Postgre   */
CREATE TABLE crawlersessions
(
 ID BIGSERIAL NOT NULL,
 CONSTRAINT PRI__CRAWLERSESSIONS_ID PRIMARY KEY (ID)
);


/* urls - Postgre   */
CREATE TABLE urls
(
 ID BIGSERIAL NOT NULL,
 SCHEME_ID INTEGER NOT NULL,
 TOPLEVELDOMAIN_ID INTEGER NOT NULL,
 SUBDOMAIN_ID INTEGER,
 SECONDLEVELDOMAIN_ID INTEGER NOT NULL,
 port INTEGER NOT NULL,
 path_part VARCHAR(2048) NOT NULL,
 search_part VARCHAR(2048) NOT NULL,
 url_md5 CHAR(32) NOT NULL,
 found_date TIMESTAMP NOT NULL,
 CONSTRAINT PRI__URLS_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__URLS_URL_MD5 UNIQUE (url_md5)
);


/* dataminingcriteria - Postgre   */
CREATE TABLE dataminingcriteria
(
 ID BIGSERIAL NOT NULL,
 keyword VARCHAR(2048) NOT NULL,
 type INTEGER NOT NULL,
 CONSTRAINT PRI__DATAMININGCRITERIA_ID PRIMARY KEY (ID)
);


/* customerkeywords - Postgre   */
CREATE TABLE customerkeywords
(
 ID BIGSERIAL NOT NULL,
 CUSTOMERDOMAIN_ID INTEGER NOT NULL,
 keyword VARCHAR(2048) NOT NULL,
 target VARCHAR(2048) NOT NULL,
 isKeywordRegex INTEGER NOT NULL,
 CONSTRAINT PRI__CUSTOMERKEYWORDS_ID PRIMARY KEY (ID)
);


/* dockeypos - Postgre   */
CREATE TABLE dockeypos
(
 ID BIGSERIAL NOT NULL,
 DOCKEY_ID INTEGER NOT NULL,
 paragraph INTEGER NOT NULL,
 position INTEGER NOT NULL,
 CONSTRAINT PRI__DOCKEYPOS_ID PRIMARY KEY (ID)
);


/* customerproducturls - Postgre   */
CREATE TABLE customerproducturls
(
 ID BIGSERIAL NOT NULL,
 PRODUCT_ID INTEGER NOT NULL,
 URL_ID INTEGER NOT NULL,
 CONSTRAINT PRI__CUSTOMERPRODUCTURLS_ID PRIMARY KEY (ID)
);


/* customersynccrawler - Postgre   */
CREATE TABLE customersynccrawler
(
 ID BIGSERIAL NOT NULL,
 CUSTOMERDOMAIN_ID INTEGER NOT NULL,
 CRAWLERSESSION_ID INTEGER NOT NULL,
 scheduled TIMESTAMP NOT NULL,
 CONSTRAINT PRI__CUSTOMERSYNCCRAWLER_ID PRIMARY KEY (ID)
);


/* customermatchcriteriagrouptype - Postgre   */
CREATE TABLE customermatchcriteriagrouptype
(
 ID BIGSERIAL NOT NULL,
 CUSTOMERMATCHCRITERIA_ID INTEGER NOT NULL,
 type INTEGER NOT NULL,
 groupPosition INTEGER NOT NULL,
 isPrimaryKey INTEGER NOT NULL,
 CONSTRAINT PRI__CUSTOMERMATCHCRITERIAGROUPTYPE_ID PRIMARY KEY (ID)
);


/* searchquerykeywords - Postgre   */
CREATE TABLE searchquerykeywords
(
 ID BIGSERIAL NOT NULL,
 KEYWORDQUERY_ID INTEGER NOT NULL,
 SEARCHQUERY_ID INTEGER NOT NULL,
 CONSTRAINT PRI__SEARCHQUERYKEYWORDS_ID PRIMARY KEY (ID)
);


/* customerqueries - Postgre   */
CREATE TABLE customerqueries
(
 ID BIGSERIAL NOT NULL,
 CUSTOMERDOMAIN_ID INTEGER NOT NULL,
 query VARCHAR(2048) NOT NULL,
 CONSTRAINT PRI__CUSTOMERQUERIES_ID PRIMARY KEY (ID)
);


/* searchquery - Postgre   */
CREATE TABLE searchquery
(
 ID BIGSERIAL NOT NULL,
 session CHAR(64) NOT NULL,
 CONSTRAINT PRI__SEARCHQUERY_ID PRIMARY KEY (ID)
);


/* docmeta - Postgre   */
CREATE TABLE docmeta
(
 ID BIGSERIAL NOT NULL,
 DICT_ID INTEGER NOT NULL,
 URLSTAGE_ID INTEGER NOT NULL,
 occurrence INTEGER NOT NULL,
 type INTEGER NOT NULL,
 CONSTRAINT PRI__DOCMETA_ID PRIMARY KEY (ID)
);


/* fencedsearch - Postgre   */
CREATE TABLE fencedsearch
(
 ID BIGSERIAL NOT NULL,
 CUSTOMER_ID INTEGER NOT NULL,
 SECONDLEVELDOMAIN_ID INTEGER NOT NULL,
 CONSTRAINT PRI__FENCEDSEARCH_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__FENCEDSEARCH_CUSTOMER_ID_SECONDLEVELDOMAIN_ID UNIQUE (CUSTOMER_ID,SECONDLEVELDOMAIN_ID)
);


/* dataminingalerts - Postgre   */
CREATE TABLE dataminingalerts
(
 ID BIGSERIAL NOT NULL,
 type INTEGER NOT NULL,
 param VARCHAR(2048),
 CONSTRAINT PRI__DATAMININGALERTS_ID PRIMARY KEY (ID)
);


/* cacheurl - Postgre   */
CREATE TABLE cacheurl
(
 ID BIGSERIAL NOT NULL,
 size INTEGER NOT NULL,
 matches INTEGER NOT NULL,
 misses INTEGER NOT NULL,
 action_time TIMESTAMP NOT NULL,
 CONSTRAINT PRI__CACHEURL_ID PRIMARY KEY (ID)
);


/* dict - Postgre   */
CREATE TABLE dict
(
 ID BIGSERIAL NOT NULL,
 keyword VARCHAR(255) NOT NULL,
 occurrence INTEGER NOT NULL,
 CONSTRAINT PRI__DICT_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__DICT_KEYWORD UNIQUE (keyword)
);


/* customerproducts - Postgre   */
CREATE TABLE customerproducts
(
 ID BIGSERIAL NOT NULL,
 CUSTOMERDOMAIN_ID INTEGER NOT NULL,
 productNo VARCHAR(1024) NOT NULL,
 productName VARCHAR(1024) NOT NULL,
 productBrand VARCHAR(1024) NOT NULL,
 CONSTRAINT PRI__CUSTOMERPRODUCTS_ID PRIMARY KEY (ID)
);


/* customerdomainblacklist - Postgre   */
CREATE TABLE customerdomainblacklist
(
 ID BIGSERIAL NOT NULL,
 CUSTOMERDOMAIN_ID INTEGER NOT NULL,
 path VARCHAR(2048) NOT NULL,
 isPathRegex INTEGER NOT NULL,
 CONSTRAINT PRI__CUSTOMERDOMAINBLACKLIST_ID PRIMARY KEY (ID)
);


/* subdomains - Postgre   */
CREATE TABLE subdomains
(
 ID BIGSERIAL NOT NULL,
 subdomain VARCHAR(255) NOT NULL,
 CONSTRAINT PRI__SUBDOMAINS_ID PRIMARY KEY (ID),
 CONSTRAINT UNIQ__SUBDOMAINS_SUBDOMAIN UNIQUE (subdomain)
);


/* matchcriteria - Postgre   */
CREATE TABLE matchcriteria
(
 ID BIGSERIAL NOT NULL,
 regex VARCHAR(2048) NOT NULL,
 CONSTRAINT PRI__MATCHCRITERIA_ID PRIMARY KEY (ID)
);


/* cacheparsed - Postgre   */
CREATE TABLE cacheparsed
(
 ID BIGSERIAL NOT NULL,
 size INTEGER NOT NULL,
 matches INTEGER NOT NULL,
 misses INTEGER NOT NULL,
 action_time TIMESTAMP NOT NULL,
 CONSTRAINT PRI__CACHEPARSED_ID PRIMARY KEY (ID)
);


ALTER TABLE queryresults ADD CONSTRAINT FK__SEARCHQUERY_ID FOREIGN KEY (SEARCHQUERY_ID) REFERENCES searchquery (ID);

ALTER TABLE urlstages ADD CONSTRAINT FK__URL_ID FOREIGN KEY (URL_ID) REFERENCES urls (ID);

ALTER TABLE documentcode ADD CONSTRAINT FK__URLSTAGE_ID FOREIGN KEY (URLSTAGE_ID) REFERENCES urlstages (ID);

ALTER TABLE hyperlinks ADD CONSTRAINT FK__TARGET_URL_ID FOREIGN KEY (TARGET_URL_ID) REFERENCES urls (ID);

ALTER TABLE hyperlinks ADD CONSTRAINT FK__URLSTAGE_ID FOREIGN KEY (URLSTAGE_ID) REFERENCES urlstages (ID);

ALTER TABLE metainfo ADD CONSTRAINT FK__URLSTAGE_ID FOREIGN KEY (URLSTAGE_ID) REFERENCES urlstages (ID);

ALTER TABLE customermatchcriteria ADD CONSTRAINT FK__CUSTOMERDOMAIN_ID FOREIGN KEY (CUSTOMERDOMAIN_ID) REFERENCES customerdomains (ID);

ALTER TABLE customermatchcriteria ADD CONSTRAINT FK__MATCHCRITERIA_ID FOREIGN KEY (MATCHCRITERIA_ID) REFERENCES matchcriteria (ID);

ALTER TABLE customersessions ADD CONSTRAINT FK__CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES customers (ID);

ALTER TABLE customersyncurl ADD CONSTRAINT FK__URL_ID FOREIGN KEY (URL_ID) REFERENCES urls (ID);

ALTER TABLE dataminingblacklist ADD CONSTRAINT FK__CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES dataminingcustomer (ID);

ALTER TABLE docurl ADD CONSTRAINT FK__DICT_ID FOREIGN KEY (DICT_ID) REFERENCES dict (ID);

ALTER TABLE docurl ADD CONSTRAINT FK__URL_ID FOREIGN KEY (URL_ID) REFERENCES urls (ID);

ALTER TABLE images ADD CONSTRAINT FK__SCHEME_ID FOREIGN KEY (SCHEME_ID) REFERENCES schemes (ID);

ALTER TABLE images ADD CONSTRAINT FK__TOPLEVELDOMAIN_ID FOREIGN KEY (TOPLEVELDOMAIN_ID) REFERENCES topleveldomains (ID);

ALTER TABLE images ADD CONSTRAINT FK__SUBDOMAIN_ID FOREIGN KEY (SUBDOMAIN_ID) REFERENCES subdomains (ID);

ALTER TABLE images ADD CONSTRAINT FK__SECONDLEVELDOMAIN_ID FOREIGN KEY (SECONDLEVELDOMAIN_ID) REFERENCES secondleveldomains (ID);

ALTER TABLE dataminingcustomersession ADD CONSTRAINT FK__CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES dataminingcustomer (ID);

ALTER TABLE latesturlstages ADD CONSTRAINT FK__URL_ID FOREIGN KEY (URL_ID) REFERENCES urls (ID);

ALTER TABLE latesturlstages ADD CONSTRAINT FK__URLSTAGE_ID FOREIGN KEY (URLSTAGE_ID) REFERENCES urlstages (ID);

ALTER TABLE imagelinks ADD CONSTRAINT FK__TARGET_URL_ID FOREIGN KEY (TARGET_URL_ID) REFERENCES urls (ID);

ALTER TABLE imagelinks ADD CONSTRAINT FK__IMAGE_URL_ID FOREIGN KEY (IMAGE_URL_ID) REFERENCES images (ID);

ALTER TABLE imagelinks ADD CONSTRAINT FK__URLSTAGE_ID FOREIGN KEY (URLSTAGE_ID) REFERENCES urlstages (ID);

ALTER TABLE customerproductimages ADD CONSTRAINT FK__PRODUCT_ID FOREIGN KEY (PRODUCT_ID) REFERENCES customerproducts (ID);

ALTER TABLE dockey ADD CONSTRAINT FK__DICT_ID FOREIGN KEY (DICT_ID) REFERENCES dict (ID);

ALTER TABLE dockey ADD CONSTRAINT FK__URLSTAGE_ID FOREIGN KEY (URLSTAGE_ID) REFERENCES urlstages (ID);

ALTER TABLE customerproductkeywords ADD CONSTRAINT FK__PRODUCT_ID FOREIGN KEY (PRODUCT_ID) REFERENCES customerproducts (ID);

ALTER TABLE customerproductkeywords ADD CONSTRAINT FK__DICT_ID FOREIGN KEY (DICT_ID) REFERENCES dict (ID);

ALTER TABLE dataminingcriteriaalerts ADD CONSTRAINT FK__CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES dataminingcustomer (ID);

ALTER TABLE dataminingcriteriaalerts ADD CONSTRAINT FK__DATAMININGALERT_ID FOREIGN KEY (DATAMININGALERT_ID) REFERENCES dataminingalerts (ID);

ALTER TABLE dataminingcriteriaalerts ADD CONSTRAINT FK__DATAMININGCRITERIA_ID FOREIGN KEY (DATAMININGCRITERIA_ID) REFERENCES dataminingcriteria (ID);

ALTER TABLE customerdomains ADD CONSTRAINT FK__CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES customers (ID);

ALTER TABLE syncurls ADD CONSTRAINT FK__URL_ID FOREIGN KEY (URL_ID) REFERENCES urls (ID);

ALTER TABLE syncurls ADD CONSTRAINT FK__SECONDLEVELDOMAIN_ID FOREIGN KEY (SECONDLEVELDOMAIN_ID) REFERENCES secondleveldomains (ID);

ALTER TABLE urls ADD CONSTRAINT FK__SCHEME_ID FOREIGN KEY (SCHEME_ID) REFERENCES schemes (ID);

ALTER TABLE urls ADD CONSTRAINT FK__TOPLEVELDOMAIN_ID FOREIGN KEY (TOPLEVELDOMAIN_ID) REFERENCES topleveldomains (ID);

ALTER TABLE urls ADD CONSTRAINT FK__SUBDOMAIN_ID FOREIGN KEY (SUBDOMAIN_ID) REFERENCES subdomains (ID);

ALTER TABLE urls ADD CONSTRAINT FK__SECONDLEVELDOMAIN_ID FOREIGN KEY (SECONDLEVELDOMAIN_ID) REFERENCES secondleveldomains (ID);

ALTER TABLE customerkeywords ADD CONSTRAINT FK__CUSTOMERDOMAIN_ID FOREIGN KEY (CUSTOMERDOMAIN_ID) REFERENCES customerdomains (ID);

ALTER TABLE dockeypos ADD CONSTRAINT FK__DOCKEY_ID FOREIGN KEY (DOCKEY_ID) REFERENCES dockey (ID);

ALTER TABLE customerproducturls ADD CONSTRAINT FK__PRODUCT_ID FOREIGN KEY (PRODUCT_ID) REFERENCES customerproducts (ID);

ALTER TABLE customerproducturls ADD CONSTRAINT FK__URL_ID FOREIGN KEY (URL_ID) REFERENCES urls (ID);

ALTER TABLE customersynccrawler ADD CONSTRAINT FK__CUSTOMERDOMAIN_ID FOREIGN KEY (CUSTOMERDOMAIN_ID) REFERENCES customerdomains (ID);

ALTER TABLE customermatchcriteriagrouptype ADD CONSTRAINT FK__CUSTOMERMATCHCRITERIA_ID FOREIGN KEY (CUSTOMERMATCHCRITERIA_ID) REFERENCES customermatchcriteria (ID);

ALTER TABLE searchquerykeywords ADD CONSTRAINT FK__SEARCHQUERY_ID FOREIGN KEY (SEARCHQUERY_ID) REFERENCES searchquery (ID);

ALTER TABLE searchquerykeywords ADD CONSTRAINT FK__KEYWORDQUERY_ID FOREIGN KEY (KEYWORDQUERY_ID) REFERENCES keywordquery (ID);

ALTER TABLE customerqueries ADD CONSTRAINT FK__CUSTOMERDOMAIN_ID FOREIGN KEY (CUSTOMERDOMAIN_ID) REFERENCES customerdomains (ID);

ALTER TABLE docmeta ADD CONSTRAINT FK__DICT_ID FOREIGN KEY (DICT_ID) REFERENCES dict (ID);

ALTER TABLE docmeta ADD CONSTRAINT FK__URLSTAGE_ID FOREIGN KEY (URLSTAGE_ID) REFERENCES urlstages (ID);

ALTER TABLE fencedsearch ADD CONSTRAINT FK__CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES dataminingcustomer (ID);

ALTER TABLE fencedsearch ADD CONSTRAINT FK__SECONDLEVELDOMAIN_ID FOREIGN KEY (SECONDLEVELDOMAIN_ID) REFERENCES secondleveldomains (ID);

ALTER TABLE customerproducts ADD CONSTRAINT FK__CUSTOMERDOMAIN_ID FOREIGN KEY (CUSTOMERDOMAIN_ID) REFERENCES customerdomains (ID);

ALTER TABLE customerdomainblacklist ADD CONSTRAINT FK__CUSTOMERDOMAIN_ID FOREIGN KEY (CUSTOMERDOMAIN_ID) REFERENCES customerdomains (ID);
