TableColumnDefinition* __TMPL_TABLE_NAME__TableBase::GetDefinition___TMPL_FIELD_NAME__() {

    TableColumnDefinitionCreateParam createParam;
    switch(DatabaseHelper::GetDatabaseType()) {
    case DB_MYSQL:
      createParam.databaseName = "__TMPL_DATABASE_NAME__";
      createParam.columnName   = "__TMPL_FIELD_NAME__";
      createParam.tableName    = "__TMPL_TABLE_NAME__";
      break;
    case DB_IBM_DB2:
      createParam.databaseName = "deepnet";
      createParam.columnName   = "__TMPL_FIELD_NAME__";
      createParam.tableName    = "__TMPL_TABLE_NAME__";
      break;
    case DB_POSTGRESQL:
      createParam.databaseName = "deepnet.public";
      createParam.columnName   = tools::StringTools::ToLowerNP("__TMPL_FIELD_NAME__");
      createParam.tableName    = tools::StringTools::ToLowerNP("__TMPL_TABLE_NAME__");
      break;
    case DB_INVALID_TYPE:
    default:
      break;
    }
    createParam.columnType          = __TMPL_FIELD_TYPE__;
    createParam.isPrimaryKey        = __TMPL_FIELD_IS_PRIMARY_KEY__;
    createParam.isAutoGenerated     = __TMPL_FIELD_IS_AUTO_GENERATED__;
    createParam.isForeignKey        = __TMPL_FIELD_IS_FOREIGN_KEY__;
    createParam.isUniqueKey         = __TMPL_FIELD_IS_UNIQUE_KEY__;
    createParam.isCombinedUniqueKey = __TMPL_FIELD_IS_COMBINED_UNIQUE_KEY__;
    createParam.isIndex             = __TMPL_FIELD_IS_INDEX__;
    createParam.isNullable          = __TMPL_FIELD_IS_NULLABLE__;
    createParam.hasDefaultValue     = __TMPL_FIELD_HAS_DEFAULT__;
    return TableColumnDefinition::CreateInstance(createParam);
}
